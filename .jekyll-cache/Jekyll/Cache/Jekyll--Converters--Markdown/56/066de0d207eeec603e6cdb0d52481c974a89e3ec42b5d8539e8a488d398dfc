I"š(<p>C++. The language which stikes fear into the very heart of CS students. In the age of Python and JavaScript it is mearly a fable told to scare us surely? Pointers. Segmentation faults. Manually installing libraries. The stories canâ€™t be true - <strong>can they?</strong></p>

<div class="panel seriesNote">
  <p><strong>Part 1</strong> in the <strong>Making a Game in SFML</strong> series.</p>
  <ul>
    
    
    
    
    <li>Part 1 -
      
      <i>Making a Game in SFML: Prelude</i>
      
    </li>
    
    
    
    
    <li>Part 2 -
      
      <a href="/2020/06/10/sfml-2.html"></a>Making a Game in SFML: Basics&lt;/a&gt;
      
    </li>
    
    
  </ul>
</div>

<style>
  .panel {
    padding: 15px;
    margin-top: 10px;
    margin-bottom: 20px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05)
  }

  .panel li {
    border-top: 1px solid #cbcbcb;
    list-style-type: none;
  }
</style>

<p>Over the past few weeks Iâ€™ve been looking into getting my head around C++ - the idea of speed and power have always sounded very exciting and other languages just werenâ€™t doing it for me. Compiling to a binary also means when you want to share your new exciting project with a friend you just need to send them a single zip file, rather than an instruction list of which Python packages to install for example.</p>

<p>One of the most popular C++ game engines/libaries is <strong>S</strong>uper <strong>F</strong>ast <strong>M</strong>edia <strong>L</strong>ibrary (<strong>SFML</strong>) - I wonâ€™t be covering how to install SFML here, as there are hundreds of ways to do it per system <em>and hundreds of people who will say Iâ€™m showing you the wrong way anyway.</em></p>

<p>So, to get started in my game development process I wanted a simple starting point - the <code class="language-plaintext highlighter-rouge">Hello World!</code> equivalent in game development <a href="https://www.ponggame.org/pong-no-flash.php">Pong</a> is a classic arcade game with a painfully simple concept: hit the ball. Since my future goals would involve a complicated project I wanted to get the basics down first; this included player controls, rendering, and networking.</p>

<p>I decided to make a simple â€˜starterâ€™ template which I could then bolster for future use.</p>

<p>With C++ a very useful practice is the use of header files. These are descriptions of what a class/function will do when used, but not how it will do it. It allows you to abstract the structure of the class without worring about the smaller picture. I created my <code class="language-plaintext highlighter-rouge">Application.hpp</code> file as below:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef __APPLICATION_H__
#define __APPLICATION_H__
</span>
<span class="cp">#include "SFML/Graphics.hpp"
#include "SFML/Main.hpp"
#include "SFML/System.hpp"
</span>
<span class="k">class</span> <span class="nc">App</span>
<span class="p">{</span>
<span class="nl">private:</span>
  <span class="n">sf</span><span class="o">::</span><span class="n">RenderWindow</span> <span class="n">window</span><span class="p">;</span>

  <span class="n">sf</span><span class="o">::</span><span class="n">Int64</span> <span class="n">previousUpdate</span><span class="p">;</span>
  <span class="n">sf</span><span class="o">::</span><span class="n">Int64</span> <span class="n">elapsedTime</span><span class="p">;</span>

  <span class="n">sf</span><span class="o">::</span><span class="n">Int32</span> <span class="n">frameDelta</span><span class="p">;</span>

<span class="nl">public:</span>
  <span class="n">App</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="n">sf</span><span class="o">::</span><span class="n">String</span> <span class="n">title</span><span class="p">);</span>

  <span class="kt">void</span> <span class="n">update</span><span class="p">();</span>
  <span class="kt">void</span> <span class="n">fixedUpdate</span><span class="p">();</span>

  <span class="kt">void</span> <span class="n">processEvents</span><span class="p">();</span>
  <span class="kt">void</span> <span class="n">processInput</span><span class="p">();</span>
<span class="p">};</span>
<span class="cp">#endif // __APPLICATION_H__
</span></code></pre></div></div>
<p><sup style="color: #777">Donâ€™t worry about the <code class="language-plaintext highlighter-rouge">#ifndef __APPLICATION_H__</code> weirdness, it just prevents this file being included more than once by mistake.</sup></p>

<p>Here you can see a basic constructor which will take the width, height, and title of the game app; 2 update functions (fixedUpdate is called after certain amount of time, update is called every frame); and 2 processing functions for events and inputs.</p>

<p>I expanded the constructor to initialise and launch the SFML window like so:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">App</span><span class="o">::</span><span class="n">App</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="n">sf</span><span class="o">::</span><span class="n">String</span> <span class="n">title</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// Create render window.</span>
  <span class="n">window</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">sf</span><span class="o">::</span><span class="n">VideoMode</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">),</span> <span class="n">title</span><span class="p">);</span>

  <span class="c1">// Init timer variables.</span>
  <span class="n">previousUpdate</span> <span class="o">=</span> <span class="n">elapsedTime</span> <span class="o">=</span> <span class="n">frameDelta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">sf</span><span class="o">::</span><span class="n">Clock</span> <span class="n">clock</span><span class="p">;</span>

  <span class="c1">// Number of game ticks per second.</span>
  <span class="k">const</span> <span class="kt">int</span> <span class="n">tickRate</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

  <span class="k">while</span> <span class="p">(</span><span class="n">window</span><span class="p">.</span><span class="n">isOpen</span><span class="p">())</span>
  <span class="p">{</span>
    <span class="c1">// Process windows events (move, resize, close).</span>
    <span class="n">processEvents</span><span class="p">();</span>
    <span class="c1">// Process user inputs.</span>
    <span class="n">processInput</span><span class="p">();</span>

    <span class="c1">// Calculate time variables.</span>
    <span class="n">frameDelta</span> <span class="o">=</span> <span class="n">clock</span><span class="p">.</span><span class="n">getElapsedTime</span><span class="p">().</span><span class="n">asMilliseconds</span><span class="p">();</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">restart</span><span class="p">();</span>
    <span class="n">elapsedTime</span> <span class="o">=</span> <span class="n">elapsedTime</span> <span class="o">+</span> <span class="n">frameDelta</span><span class="p">;</span>
    <span class="c1">// If we are due a game tick,</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="o">-</span> <span class="n">previousUpdate</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">tickRate</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">fixedUpdate</span><span class="p">();</span>
      <span class="n">previousUpdate</span> <span class="o">=</span> <span class="n">elapsedTime</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>At minimum the <code class="language-plaintext highlighter-rouge">processEvents</code> function must also be declared or the window will hang when launched:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">App</span><span class="o">::</span><span class="n">processEvents</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">sf</span><span class="o">::</span><span class="n">Event</span> <span class="n">e</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">window</span><span class="p">.</span><span class="n">pollEvent</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">sf</span><span class="o">::</span><span class="n">Event</span><span class="o">::</span><span class="n">Closed</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">window</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>With a few example paramaters this gives us the following result:</p>

<p><img src="/assets/images/sfml-intro-1.JPG" alt="Woo hoo" /></p>

<p>Sucess! We have opened a SFML window.</p>

<p>Up next we will get into rendering shapes/sprites, and handling user inputs.</p>
:ET